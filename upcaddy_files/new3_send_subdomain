#!/bin/bash

# Source configuration file
source /usr/local/bin/upcaddy_files/config.cfg

# Prompt for subdomain and address
read -p "Enter subdomain (e.g., 'app' for app.$DOMAIN): " DOMAIN_PREFIX
if [[ -z "$DOMAIN_PREFIX" ]]; then
  echo "Subdomain cannot be empty. Exiting."
  sleep 1
  exec /usr/local/bin/upcaddy  # Return to menu
fi

read -p "Enter the URL of the private subdomain: " ADDRESS
ADDRESS=$(echo "$ADDRESS" | sed -e 's~^http[s]\?://~~')  # Remove https:// if entered
if [[ -z "$ADDRESS" ]]; then
  echo "Address cannot be empty. Exiting."
  sleep 1
  exec /usr/local/bin/upcaddy  # Return to menu
fi

# Define the config file
CONFIG_FILE="${DOMAIN_PREFIX}.${DOMAIN}.caddy"

# Check if file exists and confirm deletion
if [[ -f "$CONFIG_FILE" ]]; then
  echo "$CONFIG_FILE already exists."
  read -p "Delete and recreate? (y/n): " delete_choice
  if [[ "$delete_choice" != "y" && "$delete_choice" != "yes" ]]; then
    echo "Exiting."
    sleep 1
    exec /usr/local/bin/upcaddy  # Return to menu
  fi
  rm "$CONFIG_FILE"
fi

# Create the new Caddy config file (No port required here)
cat <<EOF > "$CONFIG_FILE"
$DOMAIN_PREFIX.$DOMAIN {
  reverse_proxy https://$ADDRESS {
    header_up Host $DOMAIN_PREFIX.$DOMAIN
    transport http {
      tls_insecure_skip_verify
    }
  }
}
EOF

echo "Config file created: $CONFIG_FILE"
cat "$CONFIG_FILE"
sleep 2
exec /usr/local/bin/upcaddy  # Return to menu
